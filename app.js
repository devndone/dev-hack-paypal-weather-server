/* Note [Don't Delete] ->
1. This entire project structure is generated by using Express Generator 
and hence it contains most of the common modules preloaded and many such configured codes required by most server apps
2. I've commented out the middleware code that can be written using simple plane js code or using open source logger module 'morgan'
3. My Weather Underground API Key is 'c8c86ec253d285ab'
*/

var express = require('express');
var path = require('path');
var favicon = require('serve-favicon');
var logger = require('morgan');
var cookieParser = require('cookie-parser');
var bodyParser = require('body-parser');

var routes = require('./routes/index');
var users = require('./routes/users');

var app = express();

// view engine setup
app.set('views', path.join(__dirname, 'views'));
app.set('view engine', 'jade');

// uncomment after placing your favicon in /public
//app.use(favicon(path.join(__dirname, 'public', 'favicon.ico')));
app.use(logger('dev'));
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: false }));
app.use(cookieParser());
app.use(express.static(path.join(__dirname, 'public')));

app.use('/', routes);
app.use('/users', users);

//------------------ START : code by devndone

var request = require('request');
var async = require('async');
var wait = require('wait.for');
//var http = require('http');
app.use(function (req, res, next) {
        res.setHeader('Access-Control-Allow-Origin', '*');
        res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS, PUT, PATCH, DELETE');
        res.setHeader('Access-Control-Allow-Headers', 'X-Requested-With,content-type');
        next();
    }
);

var weatherUndergroundApiKey = 'c8c86ec253d285ab';

var cityWeather = function() {};
var state = [ 'CA', 'NE', 'TX', 'MD' ];
var city = [ 'Campbell', 'Omaha', 'Austin', 'Timonium' ];

var requestUrl;
requestUrlPrefix = 'http://api.wunderground.com/api/c8c86ec253d285ab/geolookup/conditions/q/'; //'http://api.wunderground.com/api/c8c86ec253d285ab/geolookup/conditions/q/IA/Cedar_Rapids.json';
requestUrlSuffix = '.json'; //'http://api.wunderground.com/api/c8c86ec253d285ab/geolookup/conditions/q/CA/Campbell.json';

/*var urls = function buildUrl {
  var urls = [];
  for (var i = state.length - 1; i >= 0; i--) {
    urls.push(requestUrlPrefix + state[i] + '/' + city[i] + requestUrlSuffix);
  };
};*/

/*Simple way to write server params provided by request
var myLogger = function (req, res, next) {
  console.log('LOGGED');
  next();
};

app.use(myLogger);
*/

/*Another Way To Write Middleware that prints at console all the server params provided by request, using open source logger mudule 'morgan'
//### express/connect

//Simple app that will log all request in the Apache combined format to STDOUT

//```js
//var express = require('express')
var morgan = require('morgan')

//var app = express()
app.use(morgan('combined'))
*/

app.use(logger('combined'));

var cityWeatherReport = [];

var getWeatherInfo = function(requestUrl, callback) {
  request(requestUrl, function (error, response, body) {
          //console.log("Request Started");
          try {
            if (!error && response.statusCode == 200) {

                // parse the json result
                var result = JSON.parse(body);
                //console.log(result);
                var cityW = new cityWeather();
                cityW.name = result.location['city'];
                cityW.state = result.location['state'];
                cityW.weather = result.current_observation['weather'];
                cityWeatherReport.push(cityW);
                callback(null, cityWeatherReport);
                //console.log(cityWeatherReport);
            } else {
               console.log(error, response.statusCode, body);
               callback(error);
            }
          } catch(e) {
            console.log(e);
            callback(error);
          }
          //console.log("Request End");
      });
}

/*var getWeatherInfoUsingWaitFor = function(urls, callback) {
  try {  
      //execute parallel, multiple endpoints, wait for results
      wait.parallel.map(urls, getWeather); 
  }
  catch(err){
      console.log(err); 
      callback(err);
  }
}

//wait.for requires standard callbacks(err,data)
//standardized request.get: 
var getWeather = function (options, callback) {
    request.get(options,
            function (error, response, body) {
                //console.log("Request Started");
                try {
                  if (!error && response.statusCode == 200) {

                      // parse the json result
                      var result = JSON.parse(body);
                      //console.log(result);
                      var cityW = new cityWeather();
                      cityW.name = result.location['city'];
                      cityW.state = result.location['state'];
                      cityW.weather = result.current_observation['weather'];
                      cityWeatherReport.push(cityW);
                      callback(null, cityWeatherReport);
                      //console.log(cityWeatherReport);
                  } else {
                     console.log(error, response.statusCode, body);
                     callback(error, cityWeatherReport);
                  }
                } catch(e) {
                  console.log(e);
                  callback(error);
                }
                //console.log("Request End");
            });
}*/

/*var asyncWeatherInfoGatherer = [];
var isFinished = 'false';

var asynProcess = function() {
  // Now we have an array of functions doing async tasks
  // Execute all async tasks in the asyncTasks array
  async.series([asyncWeatherInfoGathererFunc, function() {
    console.log(cityWeatherReport);
  }]);
}

var asyncWeatherInfoGathererFunc = function() {
  async.parallel(asyncWeatherInfoGatherer);
}*/

var invokeAndProcessWeatherResponse = function (callback) {
  var requestUrl;
  for (var i = state.length - 1; i >= 0; i--) {
    requestUrl = requestUrlPrefix.concat(state[i], '/', city[i], requestUrlSuffix);
    //asyncWeatherInfoGatherer.push(requestUrl);
    //console.log(requestUrl);
    /*asyncWeatherInfoGatherer.push(function() { 
      getWeatherInfo(requestUrl);
    });*/
    getWeatherInfo(requestUrl, callback);
  }
  //getWeatherInfoUsingWaitFor(asyncWeatherInfoGatherer, callback);
}

app.use('/cities', function(req, res) {

  cityWeatherReport = []; 
  isFinished = 'false';

  /*var pushWeatherInfo = function(data) {
    console.log(cityWeatherReport);
    cityWeatherReport.push(data);
  }*/
  //wait.launchFiber(handleGet, req, res); //handle in a fiber, keep node spinning
  //wait.launchFiber(invokeAndProcessWeatherResponse, function(err, cityWeatherReport){
  invokeAndProcessWeatherResponse(function(err, cityWeatherReport){
      if(err){
        //res.send(500, { error: 'something blew up' });//deprecated
        //res.status(500).send({ error: 'something blew up' });
      } else {
        console.log(cityWeatherReport);
        res.send(cityWeatherReport);
      }
    });
  //asynProcess();
  //console.log(cityWeatherReport);
  //res.send(JSON.stringify(cityWeatherReport));
  //res.send("Dev");
});

//------------------- END : code by devndone

// catch 404 and forward to error handler
app.use(function(req, res, next) {
  var err = new Error('Not Found');
  err.status = 404;
  next(err);
});

// error handlers

// development error handler
// will print stacktrace
if (app.get('env') === 'development') {
  app.use(function(err, req, res, next) {
    res.status(err.status || 500);
    res.render('error', {
      message: err.message,
      error: err
    });
  });
}

// production error handler
// no stacktraces leaked to user
app.use(function(err, req, res, next) {
  res.status(err.status || 500);
  res.render('error', {
    message: err.message,
    error: {}
  });
});


module.exports = app;
